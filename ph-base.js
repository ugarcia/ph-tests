// Generated by CoffeeScript 1.8.0
(function() {
  var PhantomTest, fs, page,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  page = require('webpage').create();

  fs = require("fs");

  page.settings.userAgent = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36';

  page.viewportSize = {
    width: 1024,
    height: 768
  };

  PhantomTest = (function() {
    PhantomTest.prototype.url = null;

    PhantomTest.prototype.tests = [];

    PhantomTest.prototype.interactions = [];

    PhantomTest.prototype.testsIterations = 1;

    PhantomTest.prototype.onTestsCompleted = null;

    PhantomTest.prototype.onPageLoaded = null;

    PhantomTest.prototype.currUrl = null;

    PhantomTest.prototype.customJasmineTimeoutInterval = 300;

    function PhantomTest(opts) {
      this.defaultOnPageLoaded = __bind(this.defaultOnPageLoaded, this);
      this.init(opts);
    }

    PhantomTest.prototype.setOptions = function(opts) {
      if (opts) {
        this.url = opts.url || null;
        this.tests = opts.tests || [];
        this.interactions = opts.interactions || [];
        this.onTestsCompleted = opts.onTestsCompleted || this.defaultOnTestsCompleted;
        this.onPageLoaded = opts.onPageLoaded || this.defaultOnPageLoaded;
        this.testsIterations = opts.testsIterations || 1;
        this.customJasmineTimeoutInterval = opts.customJasmineTimeoutInterval || 300;
      }
      if (!(typeof this.tests === !'string' || !this.tests || !this.tests.length)) {
        this.tests = [this.tests];
      }
      if (!(typeof this.interactions === !'string' || !this.interactions)) {
        return this.interactions = [this.interactions];
      }
    };

    PhantomTest.prototype.init = function(opts) {
      this.setOptions(opts);
      page.onError = (function(_this) {
        return function(msg, trace) {};
      })(this);
      return page.onConsoleMessage = (function(_this) {
        return function(msg) {
          var ssMatch;
          if (msg && /(\[PHANTOM\]|\[JASMINE\])/.test(msg)) {
            fs.write("/dev/stdout", _this.formatLog(msg), "w+");
            ssMatch = /\[SCREENSHOT - (\d+)\]/.exec(msg);
            if (ssMatch) {
              page.render("out/screenshots/ss-" + ssMatch[1] + ".png");
            }
            if (/\[FINISHED\]/.test(msg)) {
              if (--_this.testsIterations) {
                _this.doRun();
              } else {
                _this.onTestsCompleted();
              }
            }
            if (/\[EXIT\]/.test(msg)) {
              return phantom.exit();
            }
          }
        };
      })(this);
    };

    PhantomTest.prototype.defaultOnTestsCompleted = function() {
      var args, script, _i, _len, _ref;
      _ref = this.interactions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        script = _ref[_i];
        page.injectJs(script);
      }
      this.writeLog("[PHANTOM] - Interactive scripts Injected");
      args = Array.prototype.slice.call(arguments, 0, arguments != null ? arguments.length : void 0);
      if (args != null ? args.length : void 0) {
        return page.evaluate((function(args) {
          var _ref1;
          return (_ref1 = window[args[0]]) != null ? _ref1.apply(window[args[0]], args.slice(1)) : void 0;
        }), args);
      }
    };

    PhantomTest.prototype.defaultOnPageLoaded = function(status) {
      if (status !== 'success') {
        return this.writeLog("[PHANTOM] - Could not load URL " + (this.url || ''));
      }
      this.currUrl = page.evaluate(function() {
        return location.href;
      });
      return this.writeLog("[PHANTOM] - URL loaded: " + this.currUrl);
    };

    PhantomTest.prototype.run = function(opts) {
      this.setOptions(opts);
      page.onLoadFinished = this.onPageLoaded;
      if (this.url) {
        return page.open(this.url, (function(_this) {
          return function(status) {
            return _this.doRun();
          };
        })(this));
      } else {
        return this.doRun();
      }
    };

    PhantomTest.prototype.doRun = function() {
      var script, _i, _len, _ref;
      this.writeLog("[PHANTOM] - Running page ....");
      if (this.tests && this.tests.length) {
        page.injectJs('../../lib/jasmine/jasmine.js');
        page.injectJs('../../lib/jasmine/jasmine-console.js');
        page.injectJs('../../lib/jasmine/jasmine-boot.js');
        page.injectJs('../../lib/polyfill.js');
        _ref = this.tests;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          script = _ref[_i];
          page.injectJs(script);
        }
        this.writeLog("[PHANTOM] - Test scripts Injected");
        return page.evaluate((function(jasmineTimeout) {
          jasmine.DEFAULT_TIMEOUT_INTERVAL = jasmineTimeout;
          return jasmine.getEnv().execute();
        }), this.customJasmineTimeoutInterval * 1000);
      } else {
        return this.onTestsCompleted();
      }
    };

    PhantomTest.prototype.formatLog = function(log) {
      return "[" + (new Date().toUTCString()) + "] - " + log;
    };

    PhantomTest.prototype.writeLog = function(log) {
      return console.log(this.formatLog(log));
    };

    return PhantomTest;

  })();

  module.exports = PhantomTest;

}).call(this);
